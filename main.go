package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"gopkg.in/telebot.v3"

	openai "github.com/sashabaranov/go-openai"
)

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
func getChatResponse(client *openai.Client, input string) (string, error) {
	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: openai.GPT3Dot5Turbo,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    "user",
					Content: input,
				},
			},
		},
	)

	if err != nil {
		return "", err
	}

	return resp.Choices[0].Message.Content, nil
}

func main() {

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := godotenv.Load(".env"); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botApiKey := os.Getenv("TG_BOT_API_KEY")
	openaiKey := os.Getenv("OPENAI_API_KEY")

	if botApiKey == "" {
		log.Fatal("TG_BOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
	}
	if openaiKey == "" {
		log.Fatal("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
	aiClient := openai.NewClient(openaiKey)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
	pref := telebot.Settings{
		Token:  botApiKey,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	bot.Handle("/start", func(c telebot.Context) error {
		chat := c.Chat()
		message := c.Message()
		topicSendOptions := &telebot.SendOptions{
			ThreadID: message.ThreadID,
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É –æ—à–∏–±–æ–∫
		var err error

		if chat.Type == telebot.ChatSuperGroup {
			if e := c.Send("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã"); e != nil {
				err = e
			}
		}

		if message.ThreadID != 0 {
			if e := c.Send("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞"); e != nil {
				err = e
			}

			if e := c.Send("ID —Ç–æ–ø–∏–∫–∞: " + strconv.Itoa(message.ThreadID)); e != nil {
				err = e
			}

			bot.Send(chat, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ –æ—Ç–∫—É–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞", topicSendOptions)
		}

		return err
	})

	bot.Handle("/ai", func(c telebot.Context) error {
		prompt := strings.TrimSpace(c.Message().Payload)

		if prompt == "" {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/ai –ß—Ç–æ —Ç–∞–∫–æ–µ —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞?`", &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
		}

		c.Send("–î—É–º–∞—é... ü§ñ")

		reply, err := getChatResponse(aiClient, prompt)
		if err != nil {
			return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
		}

		return c.Send(reply)
	})

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	bot.Start()
}
